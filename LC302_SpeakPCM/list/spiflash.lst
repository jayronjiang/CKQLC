C51 COMPILER V8.18   SPIFLASH                                                              10/24/2013 12:06:07 PAGE 1   


C51 COMPILER V8.18, COMPILATION OF MODULE SPIFLASH
OBJECT MODULE PLACED IN .\output\spiflash.obj
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE sourcecode\spiflash.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list\spiflash.lst) 
                    -OBJECT(.\output\spiflash.obj)

line level    source

   1          
   2          /****************************************************************************/   
   3             
   4          /****************************************************************************/   
   5          #include <REG52.H>   
   6          #include "W25X.H"
   7          #include "W25X_note.H"     
   8          #include "stc12l5612.h"
   9          
  10          //////////////////////////////////////////////////////////////
  11          
  12          sbit    W25X_WP = P1^3;    //NC
  13          sbit    W25X_CS = P3^4;    //P1^4; 
  14          //sbit  W25X_DI = P1^5; 
  15          //sbit  W25X_DO = P1^6; 
  16          sbit    W25X_CLK= P1^7; 
  17          
  18             
  19          //=================================================================================================    
  20          #define SPI_PAGESIZE 256              //SPI的一个Flash页为256字节(Xmodem-128字) 
  21          
  22          uchar xdata FLASH_ext_bufx[SPI_PAGESIZE /2 ] _at_ 0;
  23          
  24          //================================================================================================
  25          
  26          #ifdef _OPTIONAL_CODE    /* optional use */
              
              void    delay_nms(uchar i)   
              {   
                      uchar  j;   
                  i=i*2;   
                  for(;i>0;i--)    {   j = 246;    while(--j); }   
              }
              #endif
  35             
  36          void    delay(uchar tt)   
  37          {   
  38   1              while(tt--);
  39   1      }  
  40           
  41          
  42          //=================================================================================================    
  43          //SPI_Read_StatusReg        Reads the status register of the serial flash    
  44          //SPI_Write_StatusReg       Performs a write to the status register    
  45          //SPI_Write_Enable          Write enables the serial flash    
  46          //SPI_Write_Disable         Write disables the serial flash    
  47          //SPI_Read_ID1              Reads the device ID using the instruction 0xAB    
  48          //SPI_Read_ID2              Reads the manufacturer ID and device ID with 0x90    
  49          //SPI_Read_ID3()            Reads the JedecDevice ID    
  50          //SPI_Read_Byte             Reads one byte from the serial flash and returns byte(max of 20 MHz CLK freque
             -ncy)    
  51          //SPI_Read_nBytes           Reads multiple bytes(max of 20 MHz CLK frequency)    
  52          //void SPI_Read_Start(uint32 Dst_Addr)
  53          //void SPI_Read_End(void)
C51 COMPILER V8.18   SPIFLASH                                                              10/24/2013 12:06:07 PAGE 2   

  54          
  55          //SPI_FastRead_Byte         Reads one byte from the serial flash and returns byte(max of 33 MHz CLK freque
             -ncy)    
  56          //SPI_FastRead_nBytes       Reads multiple bytes(max of 33 MHz CLK frequency)    
  57          //SPI_Write_Byte            Program one byte to the serial flash    
  58          //SPI_Write_nBytes          Program n bytes to the serial flash, n<=256    
  59          //SPI_Erase_Chip            Erases entire serial flash    
  60          //SPI_Erase_Sector          Erases one sector (64 KB) of the serial flash    
  61          //SPI_Wait_Busy             Polls status register until busy bit is low    
  62          //=================================================================================================    
  63          uchar   SPI_Read_StatusReg()   
  64          {   
  65   1              uchar byte = 0;   
  66   1          
  67   1              W25X_WP = 1;               //写保护置1，允许读写操作
  68   1              W25X_CS = 0;                            //  enable device    
  69   1          SPI_Send_Byte(W25X_ReadStatusReg);      //  send Read Status Register command    
  70   1          byte = SPI_Get_Byte();                  //  receive byte    
  71   1          W25X_CS = 1;                            //  disable device      
  72   1              W25X_WP = 0;
  73   1          return byte;   
  74   1      }
  75          #if 0   
              void    SPI_Write_StatusReg(byte)   
              {   
                      W25X_WP = 1;
                      W25X_CS = 0;                            //  enable device    
                  SPI_Send_Byte(W25X_WriteStatusReg);     //  select write to status register    
                  SPI_Send_Byte(byte);                    //  data that will change the status(only bits 2,3,7 can be wr
             -itten)    
                  W25X_CS = 1;                            //  disable the device    
                      W25X_WP = 0;
              }
              #endif   
  86          
  87          void    SPI_Write_Enable()   
  88          {   
  89   1              W25X_WP = 1;
  90   1              W25X_CS = 0;                            //  enable device    
  91   1          SPI_Send_Byte(W25X_WriteEnable);        //  send W25X_Write_Enable command    
  92   1          W25X_CS = 1;                            //  disable device    
  93   1              W25X_WP = 0;
  94   1      }   
  95          void    SPI_Write_Disable()   
  96          {   
  97   1              W25X_WP = 1;
  98   1              W25X_CS = 0;                            //  enable device    
  99   1          SPI_Send_Byte(W25X_WriteDisable);       //  send W25X_WriteW25X_DIsable command    
 100   1          W25X_CS = 1;                            //  disable device    
 101   1              W25X_WP = 0;
 102   1      }
 103          
 104          ///////////////////
 105             
 106          uchar   SPI_Read_ID1()   
 107          {   
 108   1              uchar byte;   
 109   1          
 110   1              W25X_WP = 1;
 111   1              W25X_CS = 0;                            //  enable device    
 112   1          SPI_Send_Byte(W25X_DeviceID);           //  send read device ID command (ABh)    
 113   1          SPI_Send_Byte(0);                       //  send address    
C51 COMPILER V8.18   SPIFLASH                                                              10/24/2013 12:06:07 PAGE 3   

 114   1          SPI_Send_Byte(0);                       //  send address    
 115   1          SPI_Send_Byte(0);                       //  send 3_Dummy address    
 116   1          byte = SPI_Get_Byte();                  //  receive Device ID byte      
 117   1          W25X_CS  = 1;                           //  disable device    
 118   1          delay(4);                               //  remain CS high for tRES2 = 1.8uS    
 119   1              W25X_WP = 0;
 120   1          return byte;   
 121   1      }   
 122          uint16   SPI_Read_ID2(uchar ID_Addr)   
 123          {   
 124   1              uint16 IData16;   
 125   1          
 126   1              W25X_WP = 1;
 127   1              W25X_CS = 0;                            //  enable device    
 128   1          SPI_Send_Byte(W25X_ManufactDeviceID);   //  send read ID command (90h)    
 129   1          SPI_Send_Byte(0x00);                    //  send address    
 130   1          SPI_Send_Byte(0x00);                    //  send address    
 131   1          SPI_Send_Byte(ID_Addr);                 //  send W25Pxx selectable ID address 00H or 01H    
 132   1          IData16 = SPI_Get_Byte()<<8;          //  receive Manufature or Device ID byte    
 133   1          IData16 |= SPI_Get_Byte();              //  receive Device or Manufacture ID byte    
 134   1          W25X_CS = 1;                            //  disable device      
 135   1              W25X_WP = 0;
 136   1          return IData16;   
 137   1      }   
 138          uint32   SPI_Read_ID3()   
 139          {   
 140   1              uint32 IData32=0;   
 141   1          
 142   1              W25X_WP = 1;
 143   1              W25X_CS = 0;                            //  enable device    
 144   1          SPI_Send_Byte(W25X_JedecDeviceID);      //  send read ID command (9Fh)    
 145   1          IData32 = SPI_Get_Byte()<<(8+8);          //  receive Manufature or Device ID byte    
 146   1          IData32 |= (SPI_Get_Byte()<<8);              //  receive Device or Manufacture ID byte    
 147   1          IData32 |=  SPI_Get_Byte();       
 148   1          W25X_CS = 1;                            //  disable device      
 149   1              W25X_WP = 0;
 150   1          return IData32;   
 151   1      } 
 152          
 153          //////////////////////////////////
 154          
 155          #ifdef _OPTIONAL_CODE    /* optional use */
              
              uchar   SPI_Read_Byte(uint32 Dst_Addr)    
              {   
                      uchar byte = 0;    
                  
                      W25X_WP = 1;
                      W25X_CS = 0;                                        //  enable device    
                  SPI_Send_Byte(W25X_ReadData);                       //  read command    
                  SPI_Send_Byte((uchar)((Dst_Addr & 0xFFFFFF) >> 16));//    send 3 address bytes    
                  SPI_Send_Byte((uchar)((Dst_Addr & 0xFFFF) >> 8));   
                  SPI_Send_Byte((uchar)(Dst_Addr & 0xFF));   
                  byte = SPI_Get_Byte();   
                  W25X_CS = 1;                                        //  disable device      
                      W25X_WP = 0;
                  return byte;                                        //  return one byte read    
              }
              #endif   
 173          
 174          void    SPI_Read_nBytes(uint32 Dst_Addr, uchar nBytes_128)   
 175          {   
C51 COMPILER V8.18   SPIFLASH                                                              10/24/2013 12:06:07 PAGE 4   

 176   1              uchar i = 0;      
 177   1      
 178   1              W25X_WP = 1;
 179   1          W25X_CS = 0;                                        //  enable device    
 180   1          SPI_Send_Byte(W25X_ReadData);                       //  read command    
 181   1          SPI_Send_Byte(((Dst_Addr & 0xFFFFFF) >> 16));     //  send 3 address bytes    
 182   1          SPI_Send_Byte(((Dst_Addr & 0xFFFF) >> 8));   
 183   1          SPI_Send_Byte(Dst_Addr & 0xFF);   
 184   1          for (i = 0; i < nBytes_128; i++)                 //  read until no_bytes is reached    
 185   1              FLASH_ext_bufx[i] = SPI_Get_Byte();                  //  receive byte and store at address 80H - F
             -FH    
 186   1          W25X_CS = 1;                                        //  disable device    
 187   1              W25X_WP = 0;
 188   1      }
 189          
 190          
 191          void SPI_Read_Start(uint32 Dst_Addr)
 192          {     
 193   1              W25X_WP = 1;
 194   1          W25X_CS = 0;                                        //  enable device    
 195   1          SPI_Send_Byte(W25X_ReadData);                       //  read command    
 196   1          SPI_Send_Byte(((Dst_Addr & 0xFFFFFF) >> 16));     //  send 3 address bytes    
 197   1          SPI_Send_Byte(((Dst_Addr & 0xFFFF) >> 8));   
 198   1          SPI_Send_Byte(Dst_Addr & 0xFF);   
 199   1      }
 200          
 201          void SPI_Read_End(void)
 202          {   
 203   1              W25X_CS = 1;
 204   1              W25X_WP = 0;
 205   1      }
 206          
 207          #ifdef _OPTIONAL_CODE    /* optional use */
                
              uchar   SPI_FastRead_Byte(uint32 Dst_Addr)    
              {   
                      uchar byte = 0;   
              
                      W25X_WP = 1;
                  W25X_CS = 0;                                        //  enable device    
                  SPI_Send_Byte(W25X_FastReadData);                   //  fast read command    
                  SPI_Send_Byte(((Dst_Addr & 0xFFFFFF) >> 16));     //  send 3 address bytes    
                  SPI_Send_Byte(((Dst_Addr & 0xFFFF) >> 8));   
                  SPI_Send_Byte(Dst_Addr & 0xFF);   
                  SPI_Send_Byte(0xFF);                                //  dummy byte    
                  byte = SPI_Get_Byte();   
                  W25X_CS = 1;                                        //  disable device      
                      W25X_WP = 0;
                  return byte;                                        //  return one byte read    
              }   
              void    SPI_FastRead_nBytes(uint32 Dst_Addr, uchar nBytes_128)   
              {   
                      uchar i = 0;       
              
                      W25X_WP = 1;
                  W25X_CS = 0;                                        //  enable device    
                  SPI_Send_Byte(W25X_FastReadData);                   //  read command    
                  SPI_Send_Byte(((Dst_Addr & 0xFFFFFF) >> 16));     //  send 3 address bytes    
                  SPI_Send_Byte(((Dst_Addr & 0xFFFF) >> 8));   
                  SPI_Send_Byte(Dst_Addr & 0xFF);   
                  SPI_Send_Byte(0xFF);                                //  dummy byte    
                  for (i = 0; i < nBytes_128; i++)                 //  read until no_bytes is reached    
C51 COMPILER V8.18   SPIFLASH                                                              10/24/2013 12:06:07 PAGE 5   

                      FLASH_ext_bufx[i] = SPI_Get_Byte();                  //  receive byte and store at address 80H - F
             -FH    
                  W25X_CS = 1;                                        //  disable device    
                      W25X_WP = 0;
              } 
              #endif
 242          
 243          #ifdef _OPTIONAL_CODE    /* optional use */
                
              void    SPI_Write_Byte(uint32 Dst_Addr, uchar byte)   
              {   
                      W25X_WP = 1;
                      W25X_CS = 0;                                    //  enable device    
                  SPI_Write_Enable();                             //  set WEL    
                  SPI_Wait_Busy();       
                  W25X_CS = 0;       
                  SPI_Send_Byte(W25X_PageProgram);                //  send Byte Program command    
                  SPI_Send_Byte(((Dst_Addr & 0xFFFFFF) >> 16)); //  send 3 address bytes    
                  SPI_Send_Byte(((Dst_Addr & 0xFFFF) >> 8));   
                  SPI_Send_Byte(Dst_Addr & 0xFF);   
                  SPI_Send_Byte(byte);                            //  send byte to be programmed   
                      
                      W25X_CS = 1;                                               //  disable device
                      W25X_WP = 0;
                      
                      SPI_Write_Disable();
                                                      
              }  
              #endif
 265           
 266          void    SPI_Write_nBytes(uint32 Dst_Addr, uchar nBytes_128)   
 267          {      
 268   1          uchar byte;
 269   1              uchar i;     
 270   1      
 271   1              W25X_WP = 1;
 272   1          W25X_CS = 0;                    /* enable device */   
 273   1          SPI_Write_Enable();             /* set WEL */   
 274   1          W25X_CS = 0;   
 275   1          SPI_Send_Byte(W25X_PageProgram);        /* send Byte Program command */   
 276   1          SPI_Send_Byte(((Dst_Addr & 0xFFFFFF) >> 16)); /* send 3 address bytes */   
 277   1          SPI_Send_Byte(((Dst_Addr & 0xFFFF) >> 8));   
 278   1          SPI_Send_Byte(Dst_Addr & 0xFF);   
 279   1             
 280   1          for (i = 0; i < nBytes_128; i++)   
 281   1          {   
 282   2              byte = FLASH_ext_bufx[i];   
 283   2              SPI_Send_Byte(byte);        /* send byte to be programmed */   
 284   2          }     
 285   1      
 286   1          W25X_CS = 1;                /* disable device */   
 287   1              W25X_WP = 0;
 288   1              
 289   1              SPI_Write_Disable();
 290   1       
 291   1      }   
 292          
 293          #ifdef _OPTIONAL_CODE    /* optional use */
              /*
              For optimized timings, it is recommended to use the page write (PW) instruction.
              */
              void    SPI_Write_Page(uint32 Dst_Addr)   
C51 COMPILER V8.18   SPIFLASH                                                              10/24/2013 12:06:07 PAGE 6   

              {      
                  uchar byte;
                      uint16 i;     
              
                      W25X_WP = 1;
                  W25X_CS = 0;                    /* enable device */   
                  SPI_Write_Enable();             /* set WEL */   
                  W25X_CS = 0;   
                  SPI_Send_Byte(W25X_PageProgram);        /* send Byte Program command */   
                  SPI_Send_Byte(((Dst_Addr & 0xFFFFFF) >> 16)); /* send 3 address bytes */   
                  SPI_Send_Byte(((Dst_Addr & 0xFFFF) >> 8));   
                  SPI_Send_Byte(Dst_Addr & 0xFF);   
                     
                  for (i = 0; i < 256; i++)   
                  {   
                      byte = FLASH_ext_bufx[i];   
                      SPI_Send_Byte(byte);        /* send byte to be programmed */   
                  }
                            
                  W25X_CS = 1;                /* disable device */   
                      W25X_WP = 0;
              
                      SPI_Write_Disable();
              
              }   
              #endif
 324          
 325          //////////////////////////
 326          
 327          void    SPI_Erase_Chip()   
 328          {   
 329   1              W25X_WP = 1;
 330   1          W25X_CS = 0;                                        //  enable device    
 331   1          SPI_Write_Enable();                                 //  set WEL    
 332   1          W25X_CS = 0;   
 333   1          SPI_Wait_Busy();   
 334   1          W25X_CS = 0;   
 335   1          SPI_Send_Byte(W25X_ChipErase);                      //  send Chip Erase command    
 336   1          W25X_CS = 1;
 337   1              SPI_Wait_Busy();
 338   1              W25X_WP = 0;
 339   1      }
 340          #ifdef _OPTIONAL_CODE    /* optional use */   
              void    SPI_Erase_Sector(uint32 Dst_Addr)   
              {   
                      W25X_WP = 1;               //写保护置1，允许读写操作
                      W25X_CS = 0;                                        //  enable device    
                  SPI_Write_Enable();                                 //  set WEL    
                  W25X_CS = 0;   
                  SPI_Send_Byte(W25X_SectorErase);                    //  send Sector Erase command    
                  SPI_Send_Byte((uchar)((Dst_Addr & 0xFFFFFF) >> 16));//    send 3 address bytes    
                  SPI_Send_Byte((uchar)((Dst_Addr & 0xFFFF) >> 8));   
                  SPI_Send_Byte((uchar)Dst_Addr & 0xFF);   
                  W25X_CS = 1;                                        //  disable device    
                      W25X_WP = 0;
              }
              #endif   
 355          void    SPI_Erase_Block(uint32 Dst_Addr)   
 356          {   
 357   1              W25X_WP = 1;               //写保护置1，允许读写操作
 358   1              W25X_CS = 0;                                        //  enable device    
 359   1          SPI_Write_Enable();                                 //  set WEL    
C51 COMPILER V8.18   SPIFLASH                                                              10/24/2013 12:06:07 PAGE 7   

 360   1          W25X_CS = 0;   
 361   1          SPI_Send_Byte(W25X_BlockErase);                    //  send Sector Erase command    
 362   1          SPI_Send_Byte((uchar)((Dst_Addr & 0xFFFFFF) >> 16));//    send 3 address bytes    
 363   1          SPI_Send_Byte((uchar)((Dst_Addr & 0xFFFF) >> 8));   
 364   1          SPI_Send_Byte((uchar)Dst_Addr & 0xFF);   
 365   1          W25X_CS = 1;                                        //  disable device    
 366   1              W25X_WP = 0;
 367   1      }   
 368          
 369          //////////////////////////////////////
 370          
 371          void    SPI_Wait_Busy()   
 372          {   
 373   1              while (SPI_Read_StatusReg() == 0x03)   
 374   1                 /*SPI_Read_StatusReg()*/;   //  waste time until not busy WEL & Busy bit all be 1 (0x03)    
 375   1      } 
 376          
 377          ////////////////////////
 378          
 379          #ifdef _OPTIONAL_CODE    /* optional use */
                
              void    SPI_PowerDown()   
              {   
                      W25X_WP = 1;               //写保护置1，允许读写操作    
                      W25X_CS = 0;                            //  enable device    
                  SPI_Send_Byte(W25X_PowerDown);          //  send W25X_PowerDown command 0xB9    
                  W25X_CS = 1;                            //  disable device    
                  delay(6);                               //  remain CS high for tPD = 3uS    
                      W25X_WP = 0;
              }   
              void    SPI_ReleasePowerDown()   
              {   
                      W25X_WP = 1;               //写保护置1，允许读写操作
                      W25X_CS = 0;                            //  enable device    
                  SPI_Send_Byte(W25X_ReleasePowerDown);   //  send W25X_PowerDown command 0xAB    
                  W25X_CS = 1;                            //  disable device    
                  delay(6);                               //  remain CS high for tRES1 = 3uS    
                      W25X_WP = 0;
              }
              #endif
 400          
 401          uchar   SPI_M25PE_RDLR(uint32 Dst_Addr)    
 402          {   
 403   1              uchar byte = 0;   
 404   1      
 405   1              W25X_WP = 1;               //写保护置1，允许读写操作    
 406   1              W25X_CS = 0;                                        //  enable device    
 407   1          SPI_Send_Byte(M25PE_RDLR);                   //  fast read command    
 408   1          SPI_Send_Byte(((Dst_Addr & 0xFFFFFF) >> 16));     //  send 3 address bytes    
 409   1          SPI_Send_Byte(((Dst_Addr & 0xFFFF) >> 8));   
 410   1          SPI_Send_Byte(Dst_Addr & 0xFF);   
 411   1      //    SPI_Send_Byte(0xFF);                                //  dummy byte    
 412   1          byte = SPI_Get_Byte();   
 413   1          W25X_CS = 1;                                        //  disable device      
 414   1              W25X_WP = 0;
 415   1          return byte;                                        //  return one byte read    
 416   1      }   
 417             
 418          #ifdef _OPTIONAL_CODE    /* optional use */
              
              void   SPI_M25PE_WRLR(uint32 Dst_Addr,uchar byte)    
              {   
C51 COMPILER V8.18   SPIFLASH                                                              10/24/2013 12:06:07 PAGE 8   

                      W25X_WP = 1;               //写保护置1，允许读写操作
                      W25X_CS = 0;                                        //  enable device    
                  SPI_Write_Enable();                                 //  set WEL    
                      W25X_CS = 0;                                        //  enable device    
                  SPI_Send_Byte(M25PE_WRLR);                   //  fast read command    
                  SPI_Send_Byte(((Dst_Addr & 0xFFFFFF) >> 16));     //  send 3 address bytes    
                  SPI_Send_Byte(((Dst_Addr & 0xFFFF) >> 8));   
                  SPI_Send_Byte(Dst_Addr & 0xFF);   
              //    SPI_Send_Byte(0xFF);                                //  dummy byte    
                  SPI_Send_Byte(byte);                                //  dummy byte    
                  W25X_CS = 1;                                        //  disable device      
                      W25X_WP = 0;
              }   
              #endif
 436          ////////////////////////////////////
 437          
 438          void    SPI_init()   
 439          {
 440   1              W25X_CS = 1;    
 441   1              W25X_CLK = 1;          //  set clock to High initial state for SPI operation mode 3 
 442   1          W25X_WP = 0;                   //写保护置0，不允许读写操作
 443   1       //   W25X_WP = 1;                 //写保护置1，允许读写操作
 444   1      
 445   1              AUXR &= (~ESPI);        // disable interrupt
 446   1              EADC_SPI = 0;           // IE.5 EADC_SPI
 447   1      
 448   1              SPDAT = 0;                      //clear SPI data
 449   1              SPSTAT = SPIF|WCOL;     //clear SPI status        // 软件写入‘1’清零
 450   1      
 451   1              SPCTL = SPEN|SSIG|MSTR | /*CPOL|CPHA |*/ SPR_DIV4;      // - master mode, MSB
 452   1              //
 453   1              // 用 | /*CPOL|*/CPHA   --fail ID3:  00000000,写、擦失败，读存储内容为0
 454   1              //        | CPOL/*|CPHA*/       --ok ID3:  FFFF8015
 455   1              //        | /*CPOL|CPHA |*/ -- ok
 456   1              //        | CPOL|CPHA   -----ok
 457   1      
 458   1      //      SPI_Write_Disable();
 459   1      }   
 460          
 461          void    SPI_Send_Byte(uchar dat)   
 462          {
 463   1      //      SPISS = 0;              // pull low slave SS
 464   1      
 465   1              SPDAT = dat;    //trigger SPI send
 466   1      
 467   1              while( !(SPSTAT&SPIF) );// wait send complete
 468   1      
 469   1              SPSTAT = SPIF|WCOL;     //clear SPI status
 470   1      
 471   1      //      SPISS = 1;      // pull high slave SS
 472   1      }   
 473          
 474          uchar   SPI_Get_Byte()   
 475          {
 476   1      //      SPISS = 0;              // pull low slave SS
 477   1      
 478   1              SPDAT = 0;      //trigger SPI    ???
 479   1      
 480   1              while( !(SPSTAT&SPIF) ) ;// wait  complete
 481   1      
 482   1              SPSTAT = SPIF|WCOL;     //clear SPI status
 483   1      
C51 COMPILER V8.18   SPIFLASH                                                              10/24/2013 12:06:07 PAGE 9   

 484   1      //      SPISS = 1;      // pull high slave SS
 485   1       
 486   1          return SPDAT;   
 487   1      } 
 488          ////
 489          
 490          /////////////////////////////////////////////


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    691    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
