C51 COMPILER V8.18   MENIE_XMODEM                                                          01/26/2011 12:14:25 PAGE 1   


C51 COMPILER V8.18, COMPILATION OF MODULE MENIE_XMODEM
OBJECT MODULE PLACED IN .\output\Menie-xmodem.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE sourcecode\Menie-xmodem.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list\Menie-xmod
                    -em.lst) OBJECT(.\output\Menie-xmodem.obj)

line level    source

   1          /*      
   2           * Copyright 2001-2010 Georges Menie (www.menie.org)
   3           * All rights reserved.
   4           * Redistribution and use in source and binary forms, with or without
   5           * modification, are permitted provided that the following conditions are met:
   6           *
   7           *     * Redistributions of source code must retain the above copyright
   8           *       notice, this list of conditions and the following disclaimer.
   9           *     * Redistributions in binary form must reproduce the above copyright
  10           *       notice, this list of conditions and the following disclaimer in the
  11           *       documentation and/or other materials provided with the distribution.
  12           *     * Neither the name of the University of California, Berkeley nor the
  13           *       names of its contributors may be used to endorse or promote products
  14           *       derived from this software without specific prior written permission.
  15           *
  16           * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
  17           * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  18           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  19           * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
  20           * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  21           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  22           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  23           * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  24           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  25           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  26           */
  27          
  28          /* this code needs standard functions memcpy() and memset()
  29             and input/output functions _inbyte() and _outbyte().
  30          
  31             the prototypes of the input/output functions are:
  32               int _inbyte(unsigned short timeout); // msec timeout
  33               void _outbyte(int c);
  34          
  35           */
  36          
  37          ///#include "crc16.h"
  38          
  39          #define SOH  0x01
  40          #define STX  0x02
  41          #define EOT  0x04
  42          #define ACK  0x06
  43          #define NAK  0x15
  44          #define CAN  0x18
  45          #define CTRLZ 0x1A
  46          
  47          #define DLY_1S 1000
  48          #define MAXRETRANS 25
  49          
  50          
  51          
  52          void flushinput(void)
  53          {
  54   1              
C51 COMPILER V8.18   MENIE_XMODEM                                                          01/26/2011 12:14:25 PAGE 2   

  55   1      }
  56          
  57          int xmodemReceive(unsigned char *dest, int destsz)
  58          {
  59   1              unsigned char xbuff[1030]; /* 1024 for XModem 1k + 3 head chars + 2 crc + nul */
  60   1              unsigned char *p;
  61   1              int bufsz, crc = 0;
  62   1              unsigned char trychar = 'C';
  63   1              unsigned char packetno = 1;
  64   1              int i, c, len = 0;
  65   1              int retry, retrans = MAXRETRANS;
  66   1      
  67   1              for(;;) {
  68   2                      for( retry = 0; retry < 16; ++retry) {
  69   3                              if (trychar) _outbyte(trychar);
*** WARNING C206 IN LINE 69 OF SOURCECODE\MENIE-XMODEM.C: '_outbyte': missing function-prototype
*** ERROR C267 IN LINE 69 OF SOURCECODE\MENIE-XMODEM.C: '_outbyte': requires ANSI-style prototype
  70   3                              if ((c = _inbyte((DLY_1S)<<1)) >= 0) {
  71   4                                      switch (c) {
  72   5                                      case SOH:
  73   5                                              bufsz = 128;
  74   5                                              goto start_recv;
  75   5                                      case STX:
  76   5                                              bufsz = 1024;
  77   5                                              goto start_recv;
  78   5                                      case EOT:
  79   5                                              flushinput();
  80   5                                              _outbyte(ACK);
  81   5                                              return len; /* normal end */
  82   5                                      case CAN:
  83   5                                              if ((c = _inbyte(DLY_1S)) == CAN) {
  84   6                                                      flushinput();
  85   6                                                      _outbyte(ACK);
  86   6                                                      return -1; /* canceled by remote */
  87   6                                              }
  88   5                                              break;
  89   5                                      default:
  90   5                                              break;
  91   5                                      }
  92   4                              }
  93   3                      }
  94   2                      if (trychar == 'C') { trychar = NAK; continue; }
  95   2                      flushinput();
  96   2                      _outbyte(CAN);
  97   2                      _outbyte(CAN);
  98   2                      _outbyte(CAN);
  99   2                      return -2; /* sync error */
 100   2      
 101   2              start_recv:
 102   2                      if (trychar == 'C') crc = 1;
 103   2                      trychar = 0;
 104   2                      p = xbuff;
 105   2                      *p++ = c;
 106   2                      for (i = 0;  i < (bufsz+(crc?1:0)+3); ++i) {
 107   3                              if ((c = _inbyte(DLY_1S)) < 0) goto reject;
 108   3                              *p++ = c;
 109   3                      }
 110   2      
 111   2                      if (xbuff[1] == (unsigned char)(~xbuff[2]) && 
 112   2                              (xbuff[1] == packetno || xbuff[1] == (unsigned char)packetno-1) &&
 113   2                              check(crc, &xbuff[3], bufsz)) {
 114   3                              if (xbuff[1] == packetno)       {
C51 COMPILER V8.18   MENIE_XMODEM                                                          01/26/2011 12:14:25 PAGE 3   

 115   4                                      register int count = destsz - len;
 116   4                                      if (count > bufsz) count = bufsz;
 117   4                                      if (count > 0) {
 118   5                                              memcpy (&dest[len], &xbuff[3], count);
 119   5                                              len += count;
 120   5                                      }
 121   4                                      ++packetno;
 122   4                                      retrans = MAXRETRANS+1;
 123   4                              }
 124   3                              if (--retrans <= 0) {
 125   4                                      flushinput();
 126   4                                      _outbyte(CAN);
 127   4                                      _outbyte(CAN);
 128   4                                      _outbyte(CAN);
 129   4                                      return -3; /* too many retry error */
 130   4                              }
 131   3                              _outbyte(ACK);
 132   3                              continue;
 133   3                      }
 134   2              reject:
 135   2                      flushinput();
 136   2                      _outbyte(NAK);
 137   2              }
 138   1      }
 139          
 140          int xmodemTransmit(unsigned char *src, int srcsz)
 141          {
 142   1              unsigned char xbuff[1030]; /* 1024 for XModem 1k + 3 head chars + 2 crc + nul */
 143   1              int bufsz, crc = -1;
 144   1              unsigned char packetno = 1;
 145   1              int i, c, len = 0;
 146   1              int retry;
 147   1      
 148   1              for(;;) {
 149   2                      for( retry = 0; retry < 16; ++retry) {
 150   3                              if ((c = _inbyte((DLY_1S)<<1)) >= 0) {
 151   4                                      switch (c) {
 152   5                                      case 'C':
 153   5                                              crc = 1;
 154   5                                              goto start_trans;
 155   5                                      case NAK:
 156   5                                              crc = 0;
 157   5                                              goto start_trans;
 158   5                                      case CAN:
 159   5                                              if ((c = _inbyte(DLY_1S)) == CAN) {
 160   6                                                      _outbyte(ACK);
 161   6                                                      flushinput();
 162   6                                                      return -1; /* canceled by remote */
 163   6                                              }
 164   5                                              break;
 165   5                                      default:
 166   5                                              break;
 167   5                                      }
 168   4                              }
 169   3                      }
 170   2                      _outbyte(CAN);
 171   2                      _outbyte(CAN);
 172   2                      _outbyte(CAN);
 173   2                      flushinput();
 174   2                      return -2; /* no sync */
 175   2      
 176   2                      for(;;) {
C51 COMPILER V8.18   MENIE_XMODEM                                                          01/26/2011 12:14:25 PAGE 4   

 177   3                      start_trans:
 178   3                              xbuff[0] = SOH; bufsz = 128;
 179   3                              xbuff[1] = packetno;
 180   3                              xbuff[2] = ~packetno;
 181   3                              c = srcsz - len;
 182   3                              if (c > bufsz) c = bufsz;
 183   3                              if (c >= 0) {
 184   4                                      memset (&xbuff[3], 0, bufsz);
 185   4                                      if (c == 0) {
 186   5                                              xbuff[3] = CTRLZ;
 187   5                                      }
 188   4                                      else {
 189   5                                              memcpy (&xbuff[3], &src[len], c);
 190   5                                              if (c < bufsz) xbuff[3+c] = CTRLZ;
 191   5                                      }
 192   4                                      if (crc) {
 193   5                                              unsigned short ccrc = crc16_ccitt(&xbuff[3], bufsz);
 194   5                                              xbuff[bufsz+3] = (ccrc>>8) & 0xFF;
 195   5                                              xbuff[bufsz+4] = ccrc & 0xFF;
 196   5                                      }
 197   4                                      else {
 198   5                                              unsigned char ccks = 0;
 199   5                                              for (i = 3; i < bufsz+3; ++i) {
 200   6                                                      ccks += xbuff[i];
 201   6                                              }
 202   5                                              xbuff[bufsz+3] = ccks;
 203   5                                      }
 204   4                                      for (retry = 0; retry < MAXRETRANS; ++retry) {
 205   5                                              for (i = 0; i < bufsz+4+(crc?1:0); ++i) {
 206   6                                                      _outbyte(xbuff[i]);
 207   6                                              }
 208   5                                              if ((c = _inbyte(DLY_1S)) >= 0 ) {
 209   6                                                      switch (c) {
 210   7                                                      case ACK:
 211   7                                                              ++packetno;
 212   7                                                              len += bufsz;
 213   7                                                              goto start_trans;
 214   7                                                      case CAN:
 215   7                                                              if ((c = _inbyte(DLY_1S)) == CAN) {
 216   8                                                                      _outbyte(ACK);
 217   8                                                                      flushinput();
 218   8                                                                      return -1; /* canceled by remote */
 219   8                                                              }
 220   7                                                              break;
 221   7                                                      case NAK:
 222   7                                                      default:
 223   7                                                              break;
 224   7                                                      }
 225   6                                              }
 226   5                                      }
 227   4                                      _outbyte(CAN);
 228   4                                      _outbyte(CAN);
 229   4                                      _outbyte(CAN);
 230   4                                      flushinput();
 231   4                                      return -4; /* xmit error */
 232   4                              }
 233   3                              else {
 234   4                                      for (retry = 0; retry < 10; ++retry) {
 235   5                                              _outbyte(EOT);
 236   5                                              if ((c = _inbyte((DLY_1S)<<1)) == ACK) break;
 237   5                                      }
 238   4                                      flushinput();
C51 COMPILER V8.18   MENIE_XMODEM                                                          01/26/2011 12:14:25 PAGE 5   

 239   4                                      return (c == ACK)?len:-5;
 240   4                              }
 241   3                      }
 242   2              }
 243   1      }
 244          
 245          #ifdef TEST_XMODEM_RECEIVE
              int main(void)
              {
                      int st;
              
                      printf ("Send data using the xmodem protocol from your terminal emulator now...\n");
                      /* the following should be changed for your environment:
                         0x30000 is the download address,
                         65536 is the maximum size to be written at this address
                       */
                      st = xmodemReceive((char *)0x30000, 65536);
                      if (st < 0) {
                              printf ("Xmodem receive error: status: %d\n", st);
                      }
                      else  {
                              printf ("Xmodem successfully received %d bytes\n", st);
                      }
              
                      return 0;
              }
              #endif
 266          #ifdef TEST_XMODEM_SEND
              int main(void)
              {
                      int st;
              
                      printf ("Prepare your terminal emulator to receive data now...\n");
                      /* the following should be changed for your environment:
                         0x30000 is the download address,
                         12000 is the maximum size to be send from this address
                       */
                      st = xmodemTransmit((char *)0x30000, 12000);
                      if (st < 0) {
                              printf ("Xmodem transmit error: status: %d\n", st);
                      }
                      else  {
                              printf ("Xmodem successfully transmitted %d bytes\n", st);
                      }
              
                      return 0;
              }
              #endif
 287          

C51 COMPILATION COMPLETE.  1 WARNING(S),  1 ERROR(S)
