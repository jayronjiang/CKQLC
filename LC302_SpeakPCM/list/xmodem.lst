C51 COMPILER V8.18   XMODEM                                                                10/24/2013 12:06:10 PAGE 1   


C51 COMPILER V8.18, COMPILATION OF MODULE XMODEM
OBJECT MODULE PLACED IN .\output\xmodem.obj
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE sourcecode\xmodem.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list\xmodem.lst) OBJE
                    -CT(.\output\xmodem.obj)

line level    source

   1          
   2          #include<REG52.H>
   3          
   4          ///#include "crc16.h"
   5          
   6          
   7          #define XMODEM_SOH  0x01
   8          #define XMODEM_STX  0x02
   9          #define XMODEM_EOT  0x04
  10          #define XMODEM_ACK  0x06
  11          #define XMODEM_NAK  0x15
  12          #define XMODEM_CAN  0x18
  13          #define XMODEM_CTRLZ 0x1A
  14          
  15          //////////////////////////////////////////////////////////////////////////////////
  16          
  17          extern unsigned short code crc16_tab[256];
  18          
  19          //////////////////////////////////////////////////////////////////
  20          /* 回调函数*/
  21          
  22          extern unsigned char *xmodem_buff; 
  23          
  24          extern unsigned char xm_flush_rx_record(unsigned char len);
  25          extern unsigned char xm_load_tx_record ( );
  26          
  27          // 用指针方式
  28          //unsigned char (*xm_flush_rx_record)(unsigned char len);
  29          //unsigned char (*xm_load_tx_record) ( );
  30          
  31          ///////
  32          
  33          #define XMODEM_XMIT_SIZE 128
  34          
  35          #define CALL_xm_flush_rx_record(len) xm_flush_rx_record(len)
  36          #define CALL_xm_load_tx_record(  ) xm_load_tx_record(  )
  37          
  38          /////////////////////////////////////////////////////////////////////////////////
  39          
  40          unsigned char  _wait_byte_1TS()
  41          {
  42   1              unsigned char timecnt=0xff;
  43   1              unsigned char timeout=0xff;
  44   1      
  45   1              while(timecnt--)
  46   1              {
  47   2              while(timeout--)
  48   2                      {
  49   3                              if(RI) return 1;
  50   3                      }
  51   2              }
  52   1              return 0;
  53   1      }
  54          unsigned char  _wait_byte()
C51 COMPILER V8.18   XMODEM                                                                10/24/2013 12:06:10 PAGE 2   

  55          {
  56   1              if( _wait_byte_1TS() ) return 1;
  57   1              if( _wait_byte_1TS() ) return 1;
  58   1              if( _wait_byte_1TS() ) return 1;
  59   1              if( _wait_byte_1TS() ) return 1;
  60   1              if( _wait_byte_1TS() ) return 1;
  61   1              
  62   1              if( _wait_byte_1TS() ) return 1;
  63   1              if( _wait_byte_1TS() ) return 1;
  64   1              if( _wait_byte_1TS() ) return 1;
  65   1              if( _wait_byte_1TS() ) return 1;
  66   1              if( _wait_byte_1TS() ) return 1;
  67   1      
  68   1              return 0;
  69   1      }
  70           
  71          unsigned char  _inbyte()
  72          {
  73   1              unsigned char cTm;  
  74   1          cTm = SBUF;   
  75   1          RI=0;   
  76   1          return cTm;   
  77   1      }
  78          
  79          void _outbyte(unsigned char c)
  80          {
  81   1          TI=0;   
  82   1          SBUF=c;
  83   1              while(!TI);
  84   1              TI=0;  
  85   1      }
  86          
  87          //////////////////////////////////
  88          
  89          #define MAX_RETRY 10
  90          
  91          #define E0_OK    0      /* normal end */
  92          #define E1_RECV  1      /* recv error */
  93          #define E2_CAN   2      /* canceled by remote */
  94          #define E3_SYNC  3       /* sync error */
  95          #define E4_RETRY 4      /* too many retry error */
  96          #define E9_FRW   9
  97          
  98          /*
  99          如何启动传输？
 100          1.传输由接收方启动，方法是向发送方发送"C"或者NAK。
 101            发送NAK信号-表示接收方打算用累加和校验；发送字符"C"-则表示接收方想打算使用CRC校验.
 102          2.发送方认为可以发送第一个数据包，传输已经启动。
 103            发送方接着应该将数据以每次128/1k字节的数据加上包头，包号，包号补码，末尾加上校验和，打包成帧格式传送。
 104          
 105          | Start Of Hearder | Packet Number | ~(Packet Number) | Packet Data | 16-Bit CRC |
 106          */
 107          
 108          
 109          unsigned char xmodemReceive()
 110          {
 111   1              unsigned char  retry;
 112   1              unsigned char  c;
 113   1              unsigned char  transz = 0;
 114   1              unsigned short i;
 115   1              unsigned char  ipacketno = 1, blockno;
 116   1              unsigned short  crc;
C51 COMPILER V8.18   XMODEM                                                                10/24/2013 12:06:10 PAGE 3   

 117   1      
 118   1              // 请求发送，以启动传输 
 119   1              // 接收帧头
 120   1              retry = 0;
 121   1              start_frame:
 122   1                      for( ; ; ) 
 123   1                      {
 124   2                              retry++;
 125   2                              if(transz==0 && retry>MAX_RETRY*2) break;
 126   2                              if(transz!=0 && retry>MAX_RETRY) break;
 127   2                              
 128   2                              if(transz==0) _outbyte('C');    // 第一次时启动传输、呼叫, 用CRC校验
 129   2      
 130   2                              if(  _wait_byte()==0 ) continue;
 131   2      
 132   2                              c = _inbyte();
 133   2                              switch (c) 
 134   2                              {
 135   3                              case XMODEM_SOH:
 136   3                                              transz = 128;
 137   3                                              goto start_recv;
 138   3                              case XMODEM_STX:
 139   3                                              transz = 250;
 140   3                                              goto start_recv;
 141   3                              case XMODEM_EOT:
 142   3                                              _outbyte(XMODEM_ACK);
 143   3                                              return E0_OK; /* normal end */
 144   3                              case XMODEM_CAN:
 145   3                                              _wait_byte();
 146   3                                              c = _inbyte();
 147   3                                              if( c == XMODEM_CAN)
 148   3                                              {
 149   4                                                      _outbyte(XMODEM_ACK);
 150   4                                                      return E2_CAN; /* canceled by remote */
 151   4                                              }
 152   3                                              break;
 153   3                              default:
 154   3                                              break;
 155   3                              }
 156   2                      }
 157   1                      _outbyte(XMODEM_CAN);
 158   1                      _outbyte(XMODEM_CAN);
 159   1                      _outbyte(XMODEM_CAN);
 160   1                      return E3_SYNC; /* sync error */
 161   1      
 162   1              start_recv:
 163   1                      if(  _wait_byte()==0 )  return E1_RECV; /* recv error */
 164   1                      blockno = _inbyte();    
 165   1                      if(  _wait_byte()==0 )  return E1_RECV; /* recv error */
 166   1                      c = _inbyte();
 167   1      
 168   1                      if( (blockno != (255-c) ) || 
 169   1                              (blockno !=ipacketno && blockno !=(ipacketno-1) ) ) 
 170   1                      {
 171   2                              for(i=0; i<transz+2; i++)       // flush data
 172   2                              {
 173   3                                       _wait_byte();
 174   3                                       c = _inbyte();
 175   3                              }
 176   2                              goto reject;
 177   2                      }
 178   1      
C51 COMPILER V8.18   XMODEM                                                                10/24/2013 12:06:10 PAGE 4   

 179   1                      crc = 0;
 180   1                      for(i=0; i<transz; i++)
 181   1                      {
 182   2                              if(  _wait_byte()==0 )  return E1_RECV; /* recv error */
 183   2                              c = _inbyte();
 184   2      
 185   2                              crc = crc16_tab[ ((crc>>8) ^ c) & 0xFF ] ^ (crc << 8);
 186   2                              xmodem_buff[ i ] = c;
 187   2                      }
 188   1      
 189   1                      if(  _wait_byte()==0 )  return E1_RECV; /* recv error */
 190   1                      c = _inbyte();
 191   1                      if( c != ((crc >> 8)&0xFF) ) goto reject;
 192   1      
 193   1                      if(  _wait_byte()==0 )  return E1_RECV; /* recv error */
 194   1                      c = _inbyte();
 195   1                  if( c != (crc&0xFF) ) goto reject;   
 196   1      
 197   1                      if( blockno ==(ipacketno-1) ) ;// 重传的包怎么处理？
 198   1                      c = CALL_xm_flush_rx_record(transz);
 199   1                      if( c!=0 ) 
 200   1                      {
 201   2                              _outbyte(XMODEM_CAN);
 202   2                              _outbyte(XMODEM_CAN);
 203   2                              _outbyte(XMODEM_CAN);
 204   2                              return E9_FRW;
 205   2                       }
 206   1                      if(blockno == ipacketno) ipacketno++;
 207   1      
 208   1                      _outbyte(XMODEM_ACK);
 209   1      
 210   1                      retry = 0;      // ???
 211   1                      goto start_frame;
 212   1      
 213   1              reject:
 214   1                      retry ++;
 215   1                      if(retry>MAX_RETRY)
 216   1                      {
 217   2                              _outbyte(XMODEM_CAN);
 218   2                              _outbyte(XMODEM_CAN);
 219   2                              _outbyte(XMODEM_CAN);
 220   2                              return E4_RETRY; /* too many retry error */
 221   2                      }
 222   1              
 223   1                      for(i=0; i<0xff; i++); // delay
 224   1      
 225   1                      _outbyte(XMODEM_NAK);
 226   1                      goto start_frame;
 227   1      }
 228          
 229          unsigned char xmodemTransmit()
 230          {
 231   1              unsigned char retry;
 232   1              unsigned char c;
 233   1              unsigned char packetno = 1;
 234   1              unsigned short crc=0;
 235   1      
 236   1              // 等待接收方启动
 237   1              for( retry = 0; retry < MAX_RETRY*2; ++retry) 
 238   1              {
 239   2                      if ( _wait_byte()==0 ) continue;
 240   2      
C51 COMPILER V8.18   XMODEM                                                                10/24/2013 12:06:10 PAGE 5   

 241   2                      c = _inbyte();
 242   2                      switch (c) 
 243   2                      {
 244   3                              case 'C':
 245   3                                              goto start_trans; // 仅仅支持CRC校验
 246   3                              case XMODEM_NAK:
 247   3      //                                      goto start_trans;  // 暂不支持和校验
 248   3                                              continue;
 249   3                              case XMODEM_CAN:
 250   3                                              _wait_byte();
 251   3                                              c = _inbyte();
 252   3                                              if( c == XMODEM_CAN) 
 253   3                                              {
 254   4                                                      _outbyte(XMODEM_ACK);
 255   4                                                      return E2_CAN; /* canceled by remote */
 256   4                                              }
 257   3                                              break;
 258   3                              default:
 259   3                                              break;
 260   3                      }
 261   2              }
 262   1              _outbyte(XMODEM_CAN);
 263   1              _outbyte(XMODEM_CAN);
 264   1              _outbyte(XMODEM_CAN);
 265   1              return E3_SYNC; /* no sync */
 266   1         
 267   1          // 开始按帧发送
 268   1              start_trans:
 269   1       
 270   1                      c = CALL_xm_load_tx_record( );  
 271   1                      if(c)
 272   1                      {
 273   2                              while(c<XMODEM_XMIT_SIZE) xmodem_buff[c++] = XMODEM_CTRLZ;      // packet size = 128
 274   2                              for (retry = 0; retry < MAX_RETRY/2; ++retry)
 275   2                              {
 276   3                                      // send packet
 277   3                                      _outbyte( XMODEM_SOH );
 278   3                                      _outbyte( packetno );
 279   3                                      _outbyte( 255-packetno );
 280   3                                      crc = 0;
 281   3                                      for(c=0; c<XMODEM_XMIT_SIZE; c++)
 282   3                                      {
 283   4                                              _outbyte( xmodem_buff[c] );
 284   4                                              crc = crc16_tab[((crc>>8) ^ xmodem_buff[c]) & 0xFF] ^ (crc << 8);
 285   4                                      }
 286   3                                      _outbyte(crc>>8);   
 287   3                                      _outbyte(crc); 
 288   3                              
 289   3                                      // wait for answer
 290   3                                      for(c=0,crc=0; c<3 && crc==0; c++) 
 291   3                                              crc = _wait_byte() ;
 292   3                                      
 293   3                                      if(crc==0) continue;
 294   3      
 295   3                                      c = _inbyte();
 296   3                                      switch (c) 
 297   3                                      {
 298   4                                              case XMODEM_ACK:
 299   4                                                      ++packetno;
 300   4                                                      goto start_trans;
 301   4                                              case XMODEM_CAN:
 302   4                                                      _wait_byte();
C51 COMPILER V8.18   XMODEM                                                                10/24/2013 12:06:10 PAGE 6   

 303   4                                                      c = _inbyte(); 
 304   4                                                      if ( c == XMODEM_CAN)
 305   4                                                      {
 306   5                                                              _outbyte(XMODEM_ACK);
 307   5                                                              return E2_CAN; /* canceled by remote */
 308   5                                                      }
 309   4                                                      break;
 310   4                                              case XMODEM_NAK:
 311   4                                              default:
 312   4                                                      break;
 313   4                                      }
 314   3                              }       //- end of 'retry < MAX_RETRY'
 315   2                              _outbyte(XMODEM_CAN);
 316   2                              _outbyte(XMODEM_CAN);
 317   2                              _outbyte(XMODEM_CAN);
 318   2                              return E4_RETRY; /* too many xmit error */
 319   2                      }
 320   1                      else // -if c==0
 321   1                      {
 322   2                              for (retry = 0; retry < 10; ++retry) 
 323   2                              {
 324   3                                      _outbyte(XMODEM_EOT);
 325   3      
 326   3                                      _wait_byte();
 327   3                                      c = _inbyte();
 328   3                                      if ( c == XMODEM_ACK) break;
 329   3                              }
 330   2      //                      TRACE("XMODEM_EOT:%s\n", c==XMODEM_ACK? "ACK" : "??");
 331   2                              return E0_OK;
 332   2                      }
 333   1      }
 334          
 335          
 336          /////////////////////////////////////////////////////////
 337          
 338          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    919    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
